AWSTemplateFormatVersion: 2010-09-09
Description: React Web app hosted on S3

Parameters:
  Stage:
    Type: String
    Default: dev
  AppName: 
    Type: String
    Default: poppyland-journal
  Domain:
    Type: String
    Default: journal.poppyland.dev
  HostedZoneId:
    Type: String
    Default: Z06420282IBWLWB0CK5TG

Resources:
  # Frontend
  WebAppS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-frontend"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebAppS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebAppS3Bucket
      PolicyDocument:
        Id: PolicyForCloudFrontPrivateContent
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${AppName}-frontend/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebAppS3Bucket.RegionalDomainName
            Id: !Sub "${AppName}-web-app-s3-origin"
            OriginAccessControlId: !GetAtt WebAppOriginAccessControl.Id
            S3OriginConfig: {}
        Enabled: "true"
        Aliases:
          - !Ref Domain
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:132507767948:certificate/6edda0a3-7cf2-4588-a19a-b80feb554c1a
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: !Sub "${AppName}-web-app-s3-origin"
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html

  WebAppOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AppName}-web-app-origin-access-control"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  
  InvalidationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: invalidation-lambda-role
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: codepipeline-job-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Sid: CodePipelinePutJobResult
                Action:
                  - "codepipeline:PutJobFailureResult"
                  - "codepipeline:PutJobSuccessResult"
                Resource: "*"
        - PolicyName: cloudfront-invalidation-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Sid: InvalidateCloudfront
                Action:
                  - "cloudfront:CreateInvalidation"
                Resource: "*"

  InvalidationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AppName}-cloudfront-invalidation"
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt InvalidationLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          code_pipeline = boto3.client("codepipeline")
          cloud_front = boto3.client("cloudfront")

          def lambda_handler(event, context):
              job_id = event["CodePipeline.job"]["id"]
              try:
                  user_params = json.loads(
                      event["CodePipeline.job"]
                          ["data"]
                          ["actionConfiguration"]
                          ["configuration"]
                          ["UserParameters"]
                  )
                  cloud_front.create_invalidation(
                      DistributionId=user_params["distributionId"],
                      InvalidationBatch={
                          "Paths": {
                              "Quantity": len(user_params["objectPaths"]),
                              "Items": user_params["objectPaths"],
                          },
                          "CallerReference": event["CodePipeline.job"]["id"],
                      },
                  )
              except Exception as e:
                  code_pipeline.put_job_failure_result(
                      jobId=job_id,
                      failureDetails={
                          "type": "JobFailed",
                          "message": str(e),
                      },
                  )
              else:
                  code_pipeline.put_job_success_result(
                      jobId=job_id,
                  )

  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref Domain
      HostedZoneId: !Ref HostedZoneId
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2

  EntryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: JournalEntry
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - 
          AttributeName: "UserId"
          AttributeType: "S"
        - 
          AttributeName: "Date"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "UserId"
          KeyType: "HASH"
        - 
          AttributeName: "Date"
          KeyType: "RANGE"

  JournalLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: journal-lambda-role
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: journal-lambda-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Sid: LambdaDynamoDBAccess
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt EntryTable.Arn

  PutEntryLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AppName}-put-entry"
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt JournalLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import base64

          dynamodb = boto3.client("dynamodb")

          def lambda_handler(event, context):
              payload = base64.b64decode(event['body'])
              payload = json.loads(payload)
              dynamodb.put_item(
                  TableName='JournalEntry', 
                  Item={
                      'UserId': {'S': payload['user_id']},
                      'Date': {'S': payload['date']},
                      'Mood': {'N': payload['mood']},
                      'BedTime': {'S': payload['bed_time']},
                      'WakeUpTime': {'S': payload['wake_up_time']},
                      'HoursSleep': {'N': payload['hours_sleep']},
                      'SleepQuality': {'S': payload['sleep_quality']},
                      'MentalHealth': {'L': payload['mental_health']},
                      'EntryContent': {'S': payload['entry_content']},
                  }
              )

  LambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PutEntryLambda
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  JournalApiGatweay:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AppName}-api-gateway
      ProtocolType: HTTP

  JournalApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref JournalApiGatweay
      StageName: api
      Description: Live API Stage
      AutoDeploy: true

  JournalApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref Domain
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: arn:aws:acm:us-east-1:132507767948:certificate/6edda0a3-7cf2-4588-a19a-b80feb554c1a

  JournalApiBasePathMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Ref Domain
      ApiId: !Ref JournalApiGatweay
      Stage: !Ref JournalApiStage

  PostIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref JournalApiGatweay
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutEntryLambda.Arn}/invocations'

  PostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JournalApiGatweay
      RouteKey: "POST /entry"
      AuthorizationType: AWS_IAM
      Target: !Join
        - /
        - - integrations
          - !Ref PostIntegration


Outputs:
  WebAppDomain:
    Value: journal.poppyland.dev
  WebAppS3BucketName:
    Value: !Ref WebAppS3Bucket