AWSTemplateFormatVersion: 2010-09-09
Description: React Web app hosted on S3

Parameters:
  Stage:
    Type: String
    Default: dev
  AppName:
    Type: String
    Default: poppyland-journal
  Domain:
    Type: String
    Default: journal.poppyland.dev
  ApiDomain:
    Type: String
    Default: journal-api.poppyland.dev
  HostedZoneId:
    Type: String
    Default: Z06420282IBWLWB0CK5TG
  Auth0Domain:
    Type: String
    Default: dev-8igvi3e7o3jja6zf.us.auth0.com
  Auth0Audience:
    Type: String
    Default: https://poppyland-journal-auth-api.com

Resources:
  WebAppS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AppName}-frontend
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebAppS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebAppS3Bucket
      PolicyDocument:
        Id: PolicyForCloudFrontPrivateContent
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${AppName}-frontend/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebAppS3Bucket.RegionalDomainName
            Id: !Sub ${AppName}-web-app-s3-origin
            OriginAccessControlId: !GetAtt WebAppOriginAccessControl.Id
            S3OriginConfig: {}
        Enabled: 'true'
        Aliases:
          - !Ref Domain
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:132507767948:certificate/6edda0a3-7cf2-4588-a19a-b80feb554c1a
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: !Sub ${AppName}-web-app-s3-origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html

  WebAppOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${AppName}-web-app-origin-access-control
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  InvalidationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: invalidation-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: codepipeline-job-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Sid: CodePipelinePutJobResult
                Action:
                  - codepipeline:PutJobFailureResult
                  - codepipeline:PutJobSuccessResult
                Resource: '*'
        - PolicyName: cloudfront-invalidation-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Sid: InvalidateCloudfront
                Action:
                  - cloudfront:CreateInvalidation
                Resource: '*'

  InvalidationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AppName}-cloudfront-invalidation
      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt InvalidationLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          code_pipeline = boto3.client("codepipeline")
          cloud_front = boto3.client("cloudfront")
          def lambda_handler(event, context):
              job_id = event["CodePipeline.job"]["id"]
              try:
                  user_params = json.loads(
                      event["CodePipeline.job"]
                          ["data"]
                          ["actionConfiguration"]
                          ["configuration"]
                          ["UserParameters"]
                  )
                  cloud_front.create_invalidation(
                      DistributionId=user_params["distributionId"],
                      InvalidationBatch={
                          "Paths": {
                              "Quantity": len(user_params["objectPaths"]),
                              "Items": user_params["objectPaths"],
                          },
                          "CallerReference": event["CodePipeline.job"]["id"],
                      },
                  )
              except Exception as e:
                  code_pipeline.put_job_failure_result(
                      jobId=job_id,
                      failureDetails={
                          "type": "JobFailed",
                          "message": str(e),
                      },
                  )
              else:
                  code_pipeline.put_job_success_result(
                      jobId=job_id,
                  )

  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref Domain
      HostedZoneId: !Ref HostedZoneId
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2

  EntryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: JournalEntry
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: Date
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: Date
          KeyType: RANGE

  JournalLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: journal-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: journal-lambda-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Sid: LambdaDynamoDBAccess
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !GetAtt EntryTable.Arn

  JWTLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: poppyland-journal-lambda-layers
        S3Key: pyjwt-lambda-package.zip
      LayerName: pyjwt-layer

  PutEntryLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AppName}-put-entry
      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt JournalLambdaRole.Arn
      Layers:
        - !Ref JWTLayer
      Code:
        ZipFile: |
          import json
          import boto3
          import jwt
          dynamodb = boto3.client("dynamodb")
          def lambda_handler(event, context):
              payload = event.get("body", {})
              payload = json.loads(payload)
              token = event.get('headers', {}).get("authorization").split(' ')[1]
              decoded_token = jwt.decode(token, algorithms=["RS256"], options={"verify_signature": False})
              user_id = decoded_token.get('sub')
              item_payload = {
                  'UserId': {'S': user_id},
                  'Date': {'S': payload.get('date')},
                  'DailyQuestionQ': {'S': payload.get('daily_question_q')}
              }
              if payload.get('mood') is not None:
                  item_payload['Mood'] = {'N': payload.get('mood')}
              if payload.get('bed_time') is not None:
                  item_payload['BedTime'] = {'S': payload.get('bed_time')}
              if payload.get('wake_up_time') is not None:
                  item_payload['WakeUpTime'] = {'S': payload.get('wake_up_time')}
              if payload.get('hours_sleep') is not None:
                  item_payload['HoursSleep'] = {'N': payload.get('hours_sleep')}
              if payload.get('sleep_quality') is not None:
                  item_payload['SleepQuality'] = {'S': payload.get('sleep_quality')}
              if payload.get('affirmation') is not None:
                  item_payload['Affirmation'] = {'S': payload.get('affirmation')}
              if payload.get('goal') is not None:
                  item_payload['Goal'] = {'S': payload.get('goal')}
              if payload.get('daily_question_a') is not None:
                  item_payload['DailyQuestionA'] = {'S': payload.get('daily_question_a')}
              if len(payload.get('mental_health', [])):
                  item_payload['MentalHealth'] = {'SS': payload.get('mental_health')}
              if len(payload.get('substances', [])):
                  item_payload['Substances'] = {'SS': payload.get('substances')}
              if len(payload.get('exercise', [])):
                  item_payload['Exercise'] = {'N': payload.get('exercise')}
              if payload.get('entry_content') is not None:
                  item_payload['EntryContent'] = {'S': payload.get('entry_content')}
              response = dynamodb.put_item(
                  TableName='JournalEntry',
                  Item=item_payload
              )
              status_code = response.get("ResponseMetadata", {}).get("HTTPStatusCode")
              if status_code == 200:
                  new_item = dynamodb.get_item(
                      TableName='JournalEntry',
                      Key={
                          'UserId': {
                              'S': user_id
                          },
                          'Date': {
                              'S': payload['date']
                          }
                      }
                  )
                  return {
                      "statusCode": 200,
                      "headers": {
                          "Content-Type": "application/json"
                      },
                      "body": json.dumps(new_item)
                  }
              else:
                  return {
                      "statusCode": status_code
                  }

  GetEntryLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AppName}-get-entry
      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt JournalLambdaRole.Arn
      Layers:
        - !Ref JWTLayer
      Code:
        ZipFile: |
          import json
          import boto3
          import jwt
          dynamodb = boto3.client("dynamodb")
          def lambda_handler(event, context):
              token = event.get('headers', {}).get("authorization").split(' ')[1]
              decoded_token = jwt.decode(token, algorithms=["RS256"], options={"verify_signature": False})
              user_id = decoded_token.get('sub')
              item = dynamodb.get_item(
                  TableName='JournalEntry',
                  Key={
                      'UserId': {
                          'S': user_id
                      },
                      'Date': {
                          'S': event.get("pathParameters", {}).get('date')
                      }
                  }
              )
              if item.get('Item') is None:
                  return {
                      "statusCode": 404,
                      "headers": {
                          "Content-Type": "application/json"
                      },
                      "body": json.dumps("Not found")
                  }
              response_item = {
                  "entry_content": item['Item'].get('EntryContent', {}).get("S"),
                  "user_id": item['Item'].get('UserId', {}).get("S"),
                  "date": item['Item'].get('Date', {}).get("S"),
                  "bed_time": item['Item'].get('BedTime', {}).get("S"),
                  "hours_sleep": item['Item'].get('HoursSleep', {}).get("N"),
                  "sleep_quality": item['Item'].get('SleepQuality', {}).get("S"),
                  "wake_up_time": item['Item'].get('WakeUpTime', {}).get("S"),
                  "mood": item['Item'].get('Mood', {}).get("N"),
                  "mental_health": item['Item'].get('MentalHealth', {}).get("SS", []),
                  "substances": item['Item'].get('Substances', {}).get("SS", []),
                  "affirmation": item['Item'].get('Affirmation', {}).get("S"),
                  "goal": item['Item'].get('Goal', {}).get("S"),
                  "daily_question_q": item['Item'].get('DailyQuestionQ', {}).get("S"),
                  "daily_question_a": item['Item'].get('DailyQuestionA', {}).get("S"),
                  "exercise": item['Item'].get('Exercise', {}).get("N")
              }
              return {
                  "statusCode": 200,
                  "headers": {
                      "Content-Type": "application/json"
                  },
                  "body": json.dumps(response_item)
              }

  GetEntriesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AppName}-get-entries
      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt JournalLambdaRole.Arn
      Layers:
        - !Ref JWTLayer
      Code:
        ZipFile: |
          import json
          import boto3
          from boto3.dynamodb.conditions import Key
          import jwt
          dynamodb = boto3.client("dynamodb")
          def lambda_handler(event, context):
              token = event.get('headers', {}).get("authorization").split(' ')[1]
              decoded_token = jwt.decode(token, algorithms=["RS256"], options={"verify_signature": False})
              user_id = decoded_token.get('sub')
              items = dynamodb.query(
                  TableName='JournalEntry',
                  KeyConditionExpression=f"UserId = :user_id",
                  ExpressionAttributeValues={
                      ":user_id": {
                          "S": user_id
                      }
                  },
                  ScanIndexForward=False
              )
              response_items = []
              for item in items['Items']:
                  response_items.append({
                      "entry_content": item.get('EntryContent', {}).get("S"),
                      "user_id": item.get('UserId', {}).get("S"),
                      "date": item.get('Date', {}).get("S"),
                      "bed_time": item.get('BedTime', {}).get("S"),
                      "hours_sleep": item.get('HoursSleep', {}).get("N"),
                      "sleep_quality": item.get('SleepQuality', {}).get("S"),
                      "wake_up_time": item.get('WakeUpTime', {}).get("S"),
                      "mood": item.get('Mood', {}).get("N"),
                      "mental_health": item.get('MentalHealth', {}).get("SS", []),
                      "substances": item.get('Substances', {}).get("SS", []),
                      "affirmation": item.get('Affirmation', {}).get("S"),
                      "goal": item.get('Goal', {}).get("S"),
                      "daily_question_q": item.get('DailyQuestionQ', {}).get("S"),
                      "daily_question_a": item.get('DailyQuestionA', {}).get("S"),
                      "exercise": item.get('Exercise', {}).get("N")
                  })
              return {
                  "statusCode": 200,
                  "headers": {
                      "Content-Type": "application/json"
                  },
                  "body": json.dumps(response_items)
              }

  DeleteEntryLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AppName}-delete-entry
      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt JournalLambdaRole.Arn
      Layers:
        - !Ref JWTLayer
      Code:
        ZipFile: |
          import boto3
          import jwt
          import json
          dynamodb = boto3.client("dynamodb")
          def lambda_handler(event, context):
              token = event.get('headers', {}).get("authorization").split(' ')[1]
              decoded_token = jwt.decode(token, algorithms=["RS256"], options={"verify_signature": False})
              user_id = decoded_token.get('sub')
              item = dynamodb.delete_item(
                  TableName='JournalEntry',
                  Key={
                      'UserId': {
                          'S': user_id
                      },
                      'Date': {
                          'S': event.get("pathParameters", {}).get('date')
                      }
                  }
              )
              return {
                  "statusCode": 200,
                  "headers": {
                      "Content-Type": "application/json"
                  },
                  "body": json.dumps("Successfully deleted item")
              }

  LambdaInvokePutEntry:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PutEntryLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${JournalApiGatweay}/*/*/entry
      SourceAccount: !Ref AWS::AccountId

  LambdaInvokeGetEntry:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetEntryLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${JournalApiGatweay}/*/*/entry/{date}
      SourceAccount: !Ref AWS::AccountId

  LambdaInvokeGetEntries:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetEntriesLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${JournalApiGatweay}/*/*/entry
      SourceAccount: !Ref AWS::AccountId

  LambdaInvokeDeleteEntry:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteEntryLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${JournalApiGatweay}/*/*/entry/{date}
      SourceAccount: !Ref AWS::AccountId

  CloudWatchApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AppName}-api-logs

  JournalApiGatweay:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AppName}-api-gateway
      ProtocolType: HTTP
      DisableExecuteApiEndpoint: true
      CorsConfiguration:
        AllowMethods:
          - GET
          - HEAD
          - OPTIONS
          - POST
          - PUT
          - DELETE
        AllowOrigins:
          - http://localhost:3000
          - !Sub https://${Domain}
        AllowHeaders:
          - Content-Type
          - Authorization
        MaxAge: 86400

  JournalApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref JournalApiGatweay
      StageName: api
      Description: Live API Stage
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt CloudWatchApiGatewayLogGroup.Arn
        Format: '{"requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller",
          "user":"$context.identity.user","requestTime":"$context.requestTime",
          "routeKey":"$context.routeKey","status":"$context.status", "error":
          "$context.error.message", "integrationError":
          "$context.integrationErrorMessage"}'

  JournalApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref ApiDomain
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: arn:aws:acm:us-east-1:132507767948:certificate/6edda0a3-7cf2-4588-a19a-b80feb554c1a

  ApiRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref ApiDomain
      HostedZoneId: !Ref HostedZoneId
      Type: A
      AliasTarget:
        DNSName: !GetAtt JournalApiDomainName.RegionalDomainName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt JournalApiDomainName.RegionalHostedZoneId

  JournalApiBasePathMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Ref ApiDomain
      ApiId: !Ref JournalApiGatweay
      Stage: !Ref JournalApiStage

  PostIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref JournalApiGatweay
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutEntryLambda.Arn}/invocations

  PutRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JournalApiGatweay
      RouteKey: PUT /entry
      AuthorizationType: JWT
      AuthorizerId: !GetAtt ApiAuthorizer.AuthorizerId
      Target: !Join
        - /
        - - integrations
          - !Ref PostIntegration

  GetEntryIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref JournalApiGatweay
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetEntryLambda.Arn}/invocations

  GetEntryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JournalApiGatweay
      RouteKey: GET /entry/{date}
      AuthorizationType: JWT
      AuthorizerId: !GetAtt ApiAuthorizer.AuthorizerId
      Target: !Join
        - /
        - - integrations
          - !Ref GetEntryIntegration

  GetEntriesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref JournalApiGatweay
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetEntriesLambda.Arn}/invocations

  GetEntriesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JournalApiGatweay
      RouteKey: GET /entry
      AuthorizationType: JWT
      AuthorizerId: !GetAtt ApiAuthorizer.AuthorizerId
      Target: !Join
        - /
        - - integrations
          - !Ref GetEntriesIntegration

  DeleteEntryIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref JournalApiGatweay
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteEntryLambda.Arn}/invocations

  DeleteEntryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JournalApiGatweay
      RouteKey: DELETE /entry/{date}
      AuthorizationType: JWT
      AuthorizerId: !GetAtt ApiAuthorizer.AuthorizerId
      Target: !Join
        - /
        - - integrations
          - !Ref DeleteEntryIntegration

  OptionsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AppName}-options
      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt JournalLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  "statusCode": 200,
                  "headers": {
                      "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,X-Amz-Security-Token,x-api-key,Authorization,Origin,Host,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers",
                      "Access-Control-Allow-Origin": "*",
                      "Access-Control-Allow-Methods": "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT",
                      "X-Requested-With": "*"
                  },
                  "body": json.dumps({ "statusText": "OK" })
              }

  OptionsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref JournalApiGatweay
      IntegrationType: AWS_PROXY
      PassthroughBehavior: WHEN_NO_MATCH
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsLambda.Arn}/invocations

  OptionsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JournalApiGatweay
      RouteKey: OPTIONS /entry
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref OptionsIntegration

  OptionsDateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JournalApiGatweay
      RouteKey: OPTIONS /entry/{date}
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref OptionsIntegration

  LambdaInvokeOptions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OptionsLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${JournalApiGatweay}/*/*/entry
      SourceAccount: !Ref AWS::AccountId

  LambdaInvokeOptionsDate:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OptionsLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${JournalApiGatweay}/*/*/entry/{date}
      SourceAccount: !Ref AWS::AccountId

  ApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: JWTAuthorizer
      ApiId: !Ref JournalApiGatweay
      AuthorizerType: JWT
      IdentitySource:
        - $request.header.Authorization
      JwtConfiguration:
        Audience:
          - !Ref Auth0Audience
        Issuer: !Sub https://${Auth0Domain}/

  MedicationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserMedication
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: MedicationName
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: MedicationName
          KeyType: RANGE

  MedicationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: medication-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: medication-lambda-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Sid: LambdaDynamoDBAccess
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !GetAtt MedicationTable.Arn

  PutMedicationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AppName}-put-medication
      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt MedicationLambdaRole.Arn
      Layers:
        - !Ref JWTLayer
      Code:
        ZipFile: |
          import json
          import boto3
          import jwt
          dynamodb = boto3.client("dynamodb")
          def lambda_handler(event, context):
              payload = event.get("body", {})
              payload = json.loads(payload)
              token = event.get('headers', {}).get("authorization").split(' ')[1]
              decoded_token = jwt.decode(token, algorithms=["RS256"], options={"verify_signature": False})
              user_id = decoded_token.get('sub')
              item_payload = {
                  'UserId': {'S': user_id},
                  'MedicationName': {'S': payload.get('medication_name')}
              }
              if payload.get('dose') is not None:
                  item_payload['Dose'] = {'S': payload.get('dose')}
              if payload.get('start_date') is not None:
                  item_payload['StartDate'] = {'S': payload.get('start_date')}
              if payload.get('end_date') is not None:
                  item_payload['EndDate'] = {'S': payload.get('end_date')}
              response = dynamodb.put_item(
                  TableName='UserMedication',
                  Item=item_payload
              )
              status_code = response.get("ResponseMetadata", {}).get("HTTPStatusCode")
              if status_code == 200:
                  new_item = dynamodb.get_item(
                      TableName='UserMedication',
                      Key={
                          'UserId': {
                              'S': user_id
                          },
                          'MedicationName': {
                              'S': payload['medication_name']
                          }
                      }
                  )
                  return {
                      "statusCode": 200,
                      "headers": {
                          "Content-Type": "application/json"
                      },
                      "body": json.dumps(new_item)
                  }
              else:
                  return {
                      "statusCode": status_code
                  }

  LambdaInvokePutMedication:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PutMedicationLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${JournalApiGatweay}/*/*/medication
      SourceAccount: !Ref AWS::AccountId

  PutMedicationIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref JournalApiGatweay
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutMedicationLambda.Arn}/invocations

  PutMedicationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JournalApiGatweay
      RouteKey: PUT /medication
      AuthorizationType: JWT
      AuthorizerId: !GetAtt ApiAuthorizer.AuthorizerId
      Target: !Join
        - /
        - - integrations
          - !Ref PutMedicationIntegration

  GetMedicationsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AppName}-get-medications
      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt MedicationLambdaRole.Arn
      Layers:
        - !Ref JWTLayer
      Code:
        ZipFile: |
          import json
          import boto3
          import jwt
          dynamodb = boto3.client("dynamodb")
          def lambda_handler(event, context):
              token = event.get('headers', {}).get("authorization").split(' ')[1]
              decoded_token = jwt.decode(token, algorithms=["RS256"], options={"verify_signature": False})
              user_id = decoded_token.get('sub')
              items = dynamodb.query(
                  TableName='UserMedication',
                  KeyConditionExpression=f"UserId = :user_id",
                  ExpressionAttributeValues={
                    ":user_id": {
                        "S": user_id
                    }
                  }
              )
              response_items = []
              for item in items['Items']:
                  response_items.append({
                      "medication_name": item.get('MedicationName', {}).get("S"),
                      "user_id": item.get('UserId', {}).get("S"),
                      "dose": item.get('Dose', {}).get("S"),
                      "start_date": item.get('StartDate', {}).get("S"),
                      "end_date": item.get('EndDate', {}).get("S")
                  })
              return {
                  "statusCode": 200,
                  "headers": {
                      "Content-Type": "application/json"
                  },
                  "body": json.dumps(response_items)
              }

  LambdaInvokeGetMedications:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetMedicationsLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${JournalApiGatweay}/*/*/medication
      SourceAccount: !Ref AWS::AccountId

  GetMedicationsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref JournalApiGatweay
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMedicationsLambda.Arn}/invocations

  GetMedicationsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JournalApiGatweay
      RouteKey: GET /medication
      AuthorizationType: JWT
      AuthorizerId: !GetAtt ApiAuthorizer.AuthorizerId
      Target: !Join
        - /
        - - integrations
          - !Ref GetMedicationsIntegration

  DeleteMedicationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AppName}-delete-medication
      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt MedicationLambdaRole.Arn
      Layers:
        - !Ref JWTLayer
      Code:
        ZipFile: |
          import json
          import boto3
          import jwt
          dynamodb = boto3.client("dynamodb")
          def lambda_handler(event, context):
              token = event.get('headers', {}).get("authorization").split(' ')[1]
              decoded_token = jwt.decode(token, algorithms=["RS256"], options={"verify_signature": False})
              user_id = decoded_token.get('sub')
              response = dynamodb.delete_item(
                  TableName='UserMedication',
                  Key={
                      'UserId': {
                          'S': user_id
                      },
                      'MedicationName': {
                          'S': event.get("pathParameters", {}).get('name')
                      }
                  }
              )
              return {
                  "statusCode": 200,
                  "headers": {
                      "Content-Type": "application/json"
                  },
                  "body": json.dumps("Successfully deleted medication")
              }

  LambdaInvokeDeleteMedication:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteMedicationLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${JournalApiGatweay}/*/*/medication/{name}
      SourceAccount: !Ref AWS::AccountId

  DeleteMedicationIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref JournalApiGatweay
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteMedicationLambda.Arn}/invocations

  DeleteMedicationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JournalApiGatweay
      RouteKey: DELETE /medication/{name}
      AuthorizationType: JWT
      AuthorizerId: !GetAtt ApiAuthorizer.AuthorizerId
      Target: !Join
        - /
        - - integrations
          - !Ref DeleteMedicationIntegration

  UserPreferencesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserPreferences
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH

  UserPreferencesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: user-preferences-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: user-preferences-lambda-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Sid: LambdaDynamoDBAccess
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !GetAtt UserPreferencesTable.Arn

  PutUserPreferencesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AppName}-put-user-preferences
      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt UserPreferencesLambdaRole.Arn
      Layers:
        - !Ref JWTLayer
      Code:
        ZipFile: |
          import json
          import boto3
          from boto3.dynamodb.types import TypeSerializer
          import jwt
          dynamodb = boto3.client("dynamodb")
          serializer = TypeSerializer()
          def lambda_handler(event, context):
              payload = event.get("body", {})
              payload = json.loads(payload)
              token = event.get('headers', {}).get("authorization").split(' ')[1]
              decoded_token = jwt.decode(token, algorithms=["RS256"], options={"verify_signature": False})
              user_id = decoded_token.get('sub')
              item_payload = {
                  'UserId': {'S': user_id},
                  'Preferences': serializer.serialize(payload.get('preferences')),
              }
              if payload.get('first_name'):
                  item_payload['FirstName'] = {'S': payload.get('first_name')}
              if payload.get('last_name'):
                  item_payload['LastName'] = {'S': payload.get('last_name')}
              if payload.get('journal_name'):
                  item_payload['JournalName'] = {'S': payload.get('journal_name')}
              if payload.get('is_dark_mode'):
                  item_payload['IsDarkMode'] = {'BOOL': payload.get('is_dark_mode')}
              if payload.get('ideal_hours_sleep'):
                  item_payload['IdealHoursSleep'] = {'N': payload.get('ideal_hours_sleep')}
              response = dynamodb.put_item(
                  TableName='UserPreferences',
                  Item=item_payload
              )
              status_code = response.get("ResponseMetadata", {}).get("HTTPStatusCode")
              if status_code == 200:
                  new_item = dynamodb.get_item(
                      TableName='UserPreferences',
                      Key={
                          'UserId': {
                              'S': user_id
                          }
                      }
                  )
                  return {
                      "statusCode": 200,
                      "headers": {
                          "Content-Type": "application/json"
                      },
                      "body": json.dumps(new_item)
                  }
              else:
                  return {
                      "statusCode": status_code
                  }

  LambdaInvokePutUserPreferences:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PutUserPreferencesLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${JournalApiGatweay}/*/*/preferences
      SourceAccount: !Ref AWS::AccountId

  PutUserPreferencesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref JournalApiGatweay
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutUserPreferencesLambda.Arn}/invocations

  PutUserPreferencesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JournalApiGatweay
      RouteKey: PUT /preferences
      AuthorizationType: JWT
      AuthorizerId: !GetAtt ApiAuthorizer.AuthorizerId
      Target: !Join
        - /
        - - integrations
          - !Ref PutUserPreferencesIntegration

  GetUserPreferencesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AppName}-get-user-preferences
      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt UserPreferencesLambdaRole.Arn
      Layers:
        - !Ref JWTLayer
      Code:
        ZipFile: |
          import json
          import boto3
          from boto3.dynamodb.types import TypeDeserializer
          import jwt
          dynamodb = boto3.client("dynamodb")
          deserializer = TypeDeserializer()
          def lambda_handler(event, context):
              token = event.get('headers', {}).get("authorization").split(' ')[1]
              decoded_token = jwt.decode(token, algorithms=["RS256"], options={"verify_signature": False})
              user_id = decoded_token.get('sub')
              item = dynamodb.get_item(
                  TableName='UserPreferences',
                  Key={
                      'UserId': {
                          'S': user_id
                      }
                  }
              )
              if item.get('Item') is None:
                  return {
                      "statusCode": 404,
                      "headers": {
                          "Content-Type": "application/json"
                      },
                      "body": json.dumps("Not found")
                  }
              response_item = {
                  "user_id": item['Item'].get('UserId', {}).get("S"),
                  "preferences": deserializer.deserialize(item['Item'].get('Preferences', {})),
                  "first_name": item['Item'].get('FirstName', {}).get("S"),
                  "last_name": item['Item'].get('LastName', {}).get("S"),
                  "journal_name": item['Item'].get('JournalName', {}).get("S"),
                  "is_dark_mode": item['Item'].get('IsDarkMode', {}).get("BOOL"),
                  "ideal_hours_sleep": item['Item'].get('IdealHoursSleep', {}).get("N")
              }
              return {
                  "statusCode": 200,
                  "headers": {
                      "Content-Type": "application/json"
                  },
                  "body": json.dumps(response_item)
              }

  LambdaInvokeGetUserPreferences:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetUserPreferencesLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${JournalApiGatweay}/*/*/preferences
      SourceAccount: !Ref AWS::AccountId

  GetUserPreferencesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref JournalApiGatweay
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserPreferencesLambda.Arn}/invocations

  GetUserPreferencesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JournalApiGatweay
      RouteKey: GET /preferences
      AuthorizationType: JWT
      AuthorizerId: !GetAtt ApiAuthorizer.AuthorizerId
      Target: !Join
        - /
        - - integrations
          - !Ref GetUserPreferencesIntegration

  BackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: !Sub ${AppName}-backup-vault
      LockConfiguration:
        MinRetentionDays: 7
        MaxRetentionDays: 30

  BackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: !Sub ${AppName}-backup-plan
        BackupPlanRule:
          - RuleName: !Sub ${AppName}-backup-plan-rule
            ScheduleExpression: cron(0 2 * * ? *)
            TargetBackupVault: !Ref BackupVault

  BackupIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - backup.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup
      RoleName: backups-role

  BackupSelection:
    Type: AWS::Backup::BackupSelection
    Properties:
      BackupPlanId: !Ref BackupPlan
      BackupSelection:
        IamRoleArn: !GetAtt BackupIamRole.Arn
        Resources:
          - !GetAtt EntryTable.Arn
          - !GetAtt MedicationTable.Arn
          - !GetAtt UserPreferencesTable.Arn
        SelectionName: !Sub ${AppName}-backup-selection

Outputs:
  WebAppDomain:
    Value: journal.poppyland.dev
  WebAppS3BucketName:
    Value: !Ref WebAppS3Bucket